#manifest
self as experimental
"other/file.caf" as other.file

#import
builtin.widgets.radio_button as radio_button
builtin.colors as _
"some/file.caf" as helpers

#using
my_crate::text::TextLine as TextLine


// Pre-registered macros.
#macros
// @h means insert 'h' in this position. If 'h' is missing than an error will be emitted.
hsla!(/* in-line comment */ h  s l , a /* over here */) = Hsla<A<B> @a C D>{ H!() H()
    hue: @h saturation: @s lightness: ?l alpha: @a
    AaBb herewego!()
}
ani!(d e) = { duration: @d easing: @e 100.0 $constant #FF000AAA}
// ?t means insert 't' in this position and if 't' is missing then exclude the associated map key.
uirect!(t b l r) = { top: ?t bottom: ?b left: ?l right: ?r }

test!() = $constant

test!(a b) = MyTuple(@a ?b $constant 100.0)

// Camel-case macros can be invoked as loadables.
Text!(t s) = TextLine{ text: ?t size: ?s }

animate_entry!(states idle hover press on_over on_press) = {
    states: @states
    values: {idle: @idle hover: ?hover press: ?press}
    settings: {pointer_enter: ?on_over press: ?on_press}
}
Animate!(type idle hover press on_over on_press) = Animated<@type>{
    values: {idle: @idle hover: ?hover press: ?press}
    settings: {pointer_enter: ?on_over press: ?on_press}
}
// The * parameter means 'grab all unassigned entries'. You can pull the entries into either an array or a map.
MultiAnimate!(type entries*) = Multi<Animated<@type>>[@entries]
// The - - brackets mean 'paste all contents in-place' (either map or array entries on the JSON side).
InteractiveRoot!(tag) = \

    ControlRoot(@tag) Interactive

\
// Syntax sugar for the m (margin) field in the concise F!() and A!() macros (`c` suffix for concise).
marginc!(t b l r) = \m:uirect!(t:@t b:@b l:@l r:@r)\
Nice!() = TheEnd

#constants
/**/$val/**/=/**/220/**/
$boolean = true
$aggregate = {x: $val}
$scoped {
    $inner = $val
}
$scene = {
    F!(1px 1px)
    "inner" {
        GottaUseBracesHere
    }
}

#specs
new_spec {
    @param1 = 58
    !Insert(
        TextLine{ text: "testing multi \
            line text"
        }
    )

    *{
        Flex!(
            width: @param1
            !flex_insert
        )
        BrColor(#0053AA)
        !Insert
        "inner"
            !Inner_insert
    }
}
// A spec override in #specs will be included when this file is imported somewhere else.
spec_override : new_spec {
    @param1 = 42
}

#commands
LoadImages[
    "a/b.png"
]
AnotherCommand($stuff)

// A spec on the outside will create a scene that can be loaded.
#scene : spec_override "scene_from_spec" {
    !Insert(
        BgColor($colors::tailwind::AMBER_50)
        "add-node"
            ImplicitNode
    )
}

// Custom node structure for the example app.
// - The node name "root" is optional. An index will be used for its scene path if missing.
#scene "root"
    // Root node covers the window.
    F!(w:Vw($val) h:Vh(100.0) jm:SpaceEvenly jc:Center)

    // Sets up a button with centered content that animates its background in response to hovers/presses.
    "button"
        $$a::b
        Flex!(
            justify_main: Center
            justify_cross: Center
        )
        ControlRoot("ExampleButton")
        Animated<BgColor>{
            values: {
                idle: hsla!(274.0 0.25 0.55 0.8)
                hover: hsla!(274.0 0.25 0.55 0.8)
                press: hsla!(274.0 0.25 0.55 0.8)
            }
            settings: {
                pointer_enter: ani!(0.005 OutExpo)
                press: ani!(0.005 InExpo)
            }
        }
        Interactive
        test_macro!({ x:5 ""} [8 ?param])

        // Sets up the button's text as a single line of text with margin to control the edges of the button.
        "text"
            Flex!(
                // Macro parameters can be marked.
                margin: uirect!(t:10.0% b:10.0% l:18.0px r:18.0px)
            )
            ControlLabel("ExampleButtonText")
            // Using marked parameters lets you skip other parameters. This text has no text because it is dynamically
            // updated in-code.
            Text!(s: 50.0)
            Animated<TextLineColor>{
                values: {
                    idle: hsla!(0.0 0.15 1.0 1.0)
                    hover: hsla!(0.0 0.23 0.9 1.0)
                    press: hsla!(0.0 0.31 0.8 1.0)
                }
                settings: {
                    pointer_enter: ani!(0.15 OutExpo)
                    press: ani!(0.2 OutExp)
                }
            }
            Multi<Animated<DimsTop>>[
                { values: {idle: Px(20.0)}, settings: {pointer_enter: ani!(0.3 InExpo)} }
                { states: [Selected], values: {idle: Px(10.0)}, settings: {pointer_enter: ani!(0.3 InExpo)} }
            ]

#scene "concise" F!(100vw 100vh Row SpaceEvenly Center)
    "button" F!(jm:Center jc:Center)
        InteractiveRoot!("ExampleButton")
        Animate!(BgColor
            hsla!(274.0 0.25 0.55 0.8) h:hsla!(274.0 0.25 0.55 0.8) p:hsla!(274.0 0.25 0.55 0.8)
            on_over:ani!(0.005 OutExp) on_press:ani!(0.005 InExpo))
        "txt" F!(marginc!(10.0% 10.0% 18.0px 18.0px))
            ControlLabel("ExampleButtonText")
            Text!(s: 50.0)
            Animate!(TextLineColor #000000 h:#112345 p:#F01111AA on_over:ani!(0.15 OutExpo) on_press:ani!(0.2 OutExpo))
            MultiAnimate!(DimsTop
                animate_entry!([] 20.0px on_over:ani!(0.3 InExpo))
                animate_entry!([Selected] 20.0px on_over:ani!(0.3 InExpo)))
            :spec_in_tree "inserted" {
                @num = 55
            }
            "another" F!(10px 11px)
                Text!("Hello!")
